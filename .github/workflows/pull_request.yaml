name: Pull request
on:
  pull_request:
    branches:
      - main
jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
      - name: Install the project
        run: uv sync --all-extras --dev
      - name: Pre-commit check
        run: uv run ruff check --fix --exit-non-zero-on-fix
      - name: Install pip for types
        run: uv pip install pip
      - name: Mypy
        run: uv run mypy --ignore-missing-imports --scripts-are-modules --install-types --non-interactive
      - name: Pre-commit
        run: uv run pre-commit run --all-files
  # test:
  #   name: Test
  #   runs-on: ubuntu-latest
  #   services:
  #     # Label used to access the service container
  #     postgres:
  #       image: postgres
  #       # Provide the password for postgres
  #       env:
  #         POSTGRES_USER: "postgres"
  #         POSTGRES_PASSWORD: "postgres"
  #         POSTGRES_DB: "test"
  #         POSTGRES_PORT: 5432
  #       # Set health checks to wait until postgres has started
  #       options: >-
  #         --health-cmd pg_isready
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #     redis:
  #       # Docker Hub image
  #       image: redis
  #       # Set health checks to wait until redis has started
  #       options: >-
  #         --health-cmd "redis-cli ping"
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #     minio:
  #       image: bitnami/minio
  #       env:
  #         MINIO_ROOT_USER: admin
  #         MINIO_ROOT_PASSWORD: "12345678"
  #       options: >-
  #         --health-cmd "curl -f http://localhost:9000/minio/health/live"
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #         --health-start-period 30s
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Setup uv
  #       uses: astral-sh/setup-uv@v5
  #       with:
  #         version: "0.6.2"
  #         enable-cache: true
  #         cache-dependency-glob: |
  #           requirements**.txt
  #           pyproject.toml
  #     - name: Install the project
  #       run: uv sync --all-extras --dev
  #     - name: Test
  #       run: uv run pytest --config-file=pytest-actions.ini --cov-report html --cov=fast_clean tests